// Code generated by goyacc -o grammer.go grammer.y. DO NOT EDIT.

//line grammer.y:2
package parse

import __yyfmt__ "fmt"

//line grammer.y:2
import "github.com/wreulicke/tincaml/ast"

//line grammer.y:8
type yySymType struct {
	yys    int
	tree   *ast.Tree
	ast    ast.AST
	expr   ast.AST
	exprs  []ast.AST
	params []ast.Identifier
	token  Token
}

const NUMBER = 57346
const TRUE = 57347
const FALSE = 57348
const STRING = 57349
const ID = 57350
const MINUS = 57351
const PLUS = 57352
const MULTI = 57353
const DIVIDE = 57354
const ASSIGN = 57355
const EQUALITY = 57356
const NOT_EQUALITY = 57357
const NOT = 57358
const LESS = 57359
const GREATER = 57360
const LESS_EQUAL = 57361
const GREATER_EQUAL = 57362
const BEGIN_BLOCK = 57363
const END_BLOCK = 57364
const LET = 57365
const IF = 57366
const THEN = 57367
const ELSE = 57368
const SEMICOLON = 57369
const prec_let = 57370
const prec_seq = 57371
const prec_if = 57372
const prec_fun = 57373
const prec_unary_minus = 57374
const prec_app = 57375

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUMBER",
	"TRUE",
	"FALSE",
	"STRING",
	"ID",
	"MINUS",
	"PLUS",
	"MULTI",
	"DIVIDE",
	"ASSIGN",
	"EQUALITY",
	"NOT_EQUALITY",
	"NOT",
	"LESS",
	"GREATER",
	"LESS_EQUAL",
	"GREATER_EQUAL",
	"BEGIN_BLOCK",
	"END_BLOCK",
	"LET",
	"IF",
	"THEN",
	"ELSE",
	"SEMICOLON",
	"prec_let",
	"prec_seq",
	"prec_if",
	"prec_fun",
	"prec_unary_minus",
	"prec_app",
	"'('",
	"')'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammer.y:229

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 169

var yyAct = [...]int{

	3, 2, 56, 57, 28, 68, 29, 30, 31, 17,
	17, 32, 33, 20, 25, 67, 17, 60, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 46,
	59, 50, 19, 18, 20, 25, 28, 19, 18, 20,
	25, 4, 26, 27, 66, 21, 22, 23, 24, 17,
	58, 9, 8, 61, 47, 62, 63, 28, 64, 1,
	0, 65, 28, 54, 55, 19, 18, 20, 25, 69,
	26, 27, 0, 21, 22, 23, 24, 19, 18, 20,
	25, 0, 26, 27, 0, 21, 22, 23, 24, 0,
	28, 48, 0, 53, 14, 13, 12, 15, 16, 6,
	0, 0, 28, 0, 0, 0, 7, 0, 19, 18,
	20, 25, 0, 10, 11, 0, 21, 22, 23, 24,
	0, 0, 0, 0, 5, 45, 19, 18, 20, 25,
	0, 26, 27, 28, 21, 22, 23, 24, 14, 13,
	12, 15, 16, 6, 0, 0, 0, 52, 0, 0,
	7, 28, 49, 0, 0, 0, 0, 10, 11, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 5,
}
var yyPact = [...]int{

	134, -1000, -18, 117, -1000, 134, 134, 134, -1000, -1000,
	3, 134, -1000, -1000, -1000, -1000, -1000, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 90, 56,
	-30, -30, 139, 68, 117, 2, 2, -30, 23, 23,
	23, 23, -30, 99, 99, -1000, 28, -33, -1000, 134,
	9, 134, -1000, 134, -1000, 134, -1000, 134, 117, 134,
	-1000, 22, -11, 117, 117, -17, -1000, 134, -1000, -1000,
}
var yyPgo = [...]int{

	0, 59, 1, 54, 0, 52, 51, 41, 31,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 5, 5, 5, 3, 3, 6, 6, 8,
	8, 7, 7, 7, 7, 7,
}
var yyR2 = [...]int{

	0, 1, 1, 3, 1, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	4, 6, 3, 4, 4, 3, 3, 6, 5, 2,
	1, 1, 1, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -4, -7, 34, 9, 16, -5, -6,
	23, 24, 6, 5, 4, 7, 8, 27, 10, 9,
	11, 17, 18, 19, 20, 12, 14, 15, 34, -4,
	-4, -4, 8, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, 35, -4, -3, 35, 13,
	-8, 21, 8, 25, 35, 36, 35, 36, -4, 21,
	8, -2, -2, -4, -4, -2, 22, 26, 22, -2,
}
var yyDef = [...]int{

	0, -2, 1, 2, 4, 0, 0, 0, 18, 19,
	0, 0, 31, 32, 33, 34, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	6, 7, 0, 0, 3, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 22, 0, 0, 5, 0,
	0, 0, 30, 0, 23, 0, 24, 0, 20, 0,
	29, 0, 0, 26, 25, 0, 28, 0, 27, 21,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	34, 35, 3, 3, 36,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:45
		{
			tree := &ast.Tree{yyDollar[1].exprs}
			yylex.(*Lexer).result = tree
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:51
		{
			yyVAL.exprs = []ast.AST{yyDollar[1].expr}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:54
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:59
		{
			yyVAL.expr = yyDollar[1].ast
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:62
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammer.y:65
		{
			yyVAL.expr = &ast.NegativeNode{yyDollar[2].expr}
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammer.y:68
		{
			yyVAL.expr = &ast.NotExpressionNode{yyDollar[2].expr}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:71
		{
			yyVAL.expr = &ast.AdditionExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.PLUS,
			}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:78
		{
			yyVAL.expr = &ast.AdditionExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.MINUS,
			}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:85
		{
			yyVAL.expr = &ast.MultiplicativeExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.MULTI,
			}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:92
		{
			yyVAL.expr = &ast.RelationalExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.LESS,
			}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:99
		{
			yyVAL.expr = &ast.RelationalExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.GREATER,
			}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:106
		{
			yyVAL.expr = &ast.RelationalExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.LESS_EQUAL,
			}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:113
		{
			yyVAL.expr = &ast.RelationalExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.GREATER_EQUAL,
			}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:120
		{
			yyVAL.expr = &ast.MultiplicativeExpressionNode{
				Left:     yyDollar[1].expr,
				Right:    yyDollar[3].expr,
				Operator: ast.DIVIDE,
			}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:127
		{
			yyVAL.expr = &ast.EqualityExpressionNode{
				Left:  yyDollar[1].expr,
				Right: yyDollar[3].expr,
			}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:133
		{
			yyVAL.expr = &ast.NotEqualityExpressionNode{
				Left:  yyDollar[1].expr,
				Right: yyDollar[3].expr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:142
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammer.y:145
		{
			yyVAL.expr = &ast.AssignmentExpressionNode{
				ID:          ast.ID(yyDollar[2].token.literal),
				Initializer: yyDollar[4].expr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line grammer.y:151
		{
			yyVAL.expr = &ast.IfExpressionNode{
				Cond: yyDollar[2].expr,
				Then: yyDollar[4].exprs,
				Else: yyDollar[6].exprs,
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:160
		{
			yyVAL.expr = &ast.FunctionCall{
				Function: yyDollar[1].expr,
				Args:     []ast.AST{},
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammer.y:166
		{
			yyVAL.expr = &ast.FunctionCall{
				Function: yyDollar[1].expr,
				Args:     []ast.AST{yyDollar[3].expr},
			}
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammer.y:172
		{
			yyVAL.expr = &ast.FunctionCall{
				Function: yyDollar[1].expr,
				Args:     yyDollar[3].exprs,
			}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:180
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammer.y:183
		{
			yyVAL.exprs = []ast.AST{yyDollar[1].expr, yyDollar[3].expr}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line grammer.y:188
		{
			yyVAL.expr = &ast.FunctionNode{
				ID:     ast.ID(yyDollar[2].token.literal),
				Params: yyDollar[3].params,
				Body:   yyDollar[5].exprs,
			}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammer.y:195
		{
			yyVAL.expr = &ast.FunctionNode{
				ID:     ast.ID(yyDollar[2].token.literal),
				Params: []ast.Identifier{},
				Body:   yyDollar[4].exprs,
			}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammer.y:204
		{
			yyVAL.params = append(yyDollar[1].params, ast.Identifier{ast.ID(yyDollar[2].token.literal)})
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:207
		{
			yyVAL.params = []ast.Identifier{ast.Identifier{ast.ID(yyDollar[1].token.literal)}}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:212
		{
			yyVAL.ast = &ast.BooleanNode{Value: false}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:215
		{
			yyVAL.ast = &ast.BooleanNode{Value: true}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:218
		{
			lex := yylex.(*Lexer)
			num := lex.parseFloat(yyDollar[1].token.literal)
			yyVAL.ast = &ast.NumberNode{Value: num}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:223
		{
			yyVAL.ast = &ast.StringNode{yyDollar[1].token.literal}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammer.y:226
		{
			yyVAL.ast = &ast.Identifier{ast.ID(yyDollar[1].token.literal)}
		}
	}
	goto yystack /* stack new state and value */
}
